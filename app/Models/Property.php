<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

/**
 * App\Models\Property
 *
 * @property-read Model|\Eloquent $parent
 * @property-read \Illuminate\Database\Eloquent\Collection|Property[] $property
 * @property-read int|null $property_count
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\Review[] $reviews
 * @property-read int|null $reviews_count
 * @method static \Illuminate\Database\Eloquent\Builder|Property newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Property newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Property query()
 * @mixin \Eloquent
 * @property int $id
 * @property string $name
 * @property string|null $description
 * @property string $uuid autogenerated
 * @property int|null $parent_id
 * @property string|null $parent_type
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @method static \Illuminate\Database\Eloquent\Builder|Property whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Property whereDescription($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Property whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Property whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Property whereParentId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Property whereParentType($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Property whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Property whereUuid($value)
 */
class Property extends Model
{
    protected $fillable = [
        'name',
        'description',
    ];

    protected $guarded = [
        'uuid'
    ];

    protected $hidden = [
        'parent_id',
        'parent_type',
    ];

    public function parent()
    {
        return $this->morphTo();
    }

    public function property()
    {
        return $this->morphMany(__CLASS__, 'parent');
    }

    public function reviews()
    {
        return $this->morphMany(Review::class, 'reviewable');
    }

    /**
     * @return Company|\Eloquent|Model
     */
    public function company()
    {
        if (!$this->parent_type === Company::class) {
            return $this->parent->parent();
        }

        return $this->parent;
    }

    /**
     * @return mixed
     * @deprecated
     * @see Property::averageScore()
     */
    public function averageReview()
    {
        return $this->reviews()->average('score');
    }

    public function averageScore()
    {
        return round($this->reviews()->average('score'), 1);
    }

    public function averageActiveScore()
    {
        return round($this->reviews()->isActive()->average('score'), 1);
    }
}
