<?php

namespace App\Models;

use App\User;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\MorphMany;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;

/**
 * App\Models\Company
 *
 * @property int $id
 * @property string $name
 * @property string $uuid autogenerated
 * @property string|null $description
 * @property \Illuminate\Support\Carbon|null $created_at
 * @property \Illuminate\Support\Carbon|null $updated_at
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\Property[] $property
 * @property-read int|null $property_count
 * @property-read \Illuminate\Database\Eloquent\Collection|User[] $users
 * @property-read int|null $users_count
 * @method static \Illuminate\Database\Eloquent\Builder|Company newModelQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Company newQuery()
 * @method static \Illuminate\Database\Eloquent\Builder|Company query()
 * @method static \Illuminate\Database\Eloquent\Builder|Company whereCreatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Company whereDescription($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Company whereId($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Company whereName($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Company whereUpdatedAt($value)
 * @method static \Illuminate\Database\Eloquent\Builder|Company whereUuid($value)
 * @mixin \Eloquent
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\Review[] $reviews
 * @property-read int|null $reviews_count
 * @property-read \Illuminate\Database\Eloquent\Collection|\App\Models\Property[] $properties
 * @property-read int|null $properties_count
 */
class Company extends Model
{
    protected $fillable = [
        'name',
        'description'
    ];

    protected $guarded = [
        'uuid'
    ];

    public function averageScore()
    {
        return round($this->reviews()->average('score'), 1);
    }

    public function averageActiveScore()
    {
        return round($this->reviews()->isActive()->average('score'), 1);
    }

    public function users(): BelongsToMany
    {
        return $this->belongsToMany(User::class);
    }

    /**
     * @return MorphMany
     *
     * @see Company::properties()
     */
    public function property(): MorphMany
    {
        return $this->properties();
    }

    public function properties(): MorphMany
    {
        return $this->morphMany(Property::class, 'parent');
    }

    public function reviews()
    {
        return $this->morphMany(Review::class, 'reviewable');
    }
}
